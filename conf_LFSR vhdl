library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.numeric_std.all;

entity LFSR is 
generic(
	BITNES : natural := 32;
	TEST : natural := 5 -- log2(bitnes) СЃ РѕРєСЂСѓРіР»РµРЅРёРµРј  Р±РѕР»СЊС€СѓСЋ СЃС‚РѕСЂРѕРЅСѓ
);
port(
	clk, reset : in std_logic;
	input_polynom : in std_logic_vector(BITNES-1 downto 0);
	polynom_WE : in std_logic;
	outputLFSR : out std_logic_vector(BITNES-1 downto 0)
);
end LFSR;


architecture RTL of LFSR is
signal alpha : std_logic_vector(BITNES-1 downto 0);
signal beta : std_logic_vector(BITNES-1 downto 0);
signal LFSR : std_logic_vector(BITNES-1 downto 0);
signal coder_ind : integer;
signal LFSR_shift_in : std_logic;
signal MUX_output : std_logic;
begin

POLYNOM_REGISTER: process(clk) 
begin
if(rising_edge(clk)) then
    if(reset = '1') then
        alpha <= (others => '0');
        beta<= (others => '0');
    else
	   if(polynom_WE = '1') then	
			alpha <= input_polynom;
			beta <= not input_polynom;
			beta(coder_ind)<='0';
	   else
			alpha <= alpha;
			beta <= beta;
	   end if;	
	end if;
end if;
end process;

prior_coder: process(input_polynom) 
begin
	for k in BITNES-1 downto 0 loop
		if(input_polynom(k) = '1') then
			coder_ind <= k;
		end if;
	end loop;
end process;

LFSR_module: process(clk)
variable LFSR_output : std_logic_vector(BITNES-1 downto 0) := (0 => '1',others => '0');
begin
if(rising_edge(clk)) then
    if(reset = '1') then
        LFSR_output := (0 => '1',others => '0');
    else
	   LFSR_output := LFSR_output(BITNES-2 downto 0) & LFSR_shift_in;
	end if;
end if;
	outputLFSR <= LFSR_output;
	LFSR <= LFSR_output;
end process;

process(LFSR, alpha ,beta)
variable tmp : std_logic_vector(BITNES downto 0);
begin
	tmp := (others => '0');
	for k in BITNES-1 downto 0 loop
		tmp(k) := (tmp(k+1) and beta(k)) xor (alpha(k) and LFSR(k));
	end loop;
    LFSR_shift_in <= tmp(0);
end process;

end RTL;
