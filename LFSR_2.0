library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.numeric_std.all;

entity LFSR is 
generic(
	BITNES : natural := 32;
	TEST : natural := 5 -- log2(bitnes) СЃ РѕРєСЂСѓРіР»РµРЅРёРµРј  Р±РѕР»СЊС€СѓСЋ СЃС‚РѕСЂРѕРЅСѓ
);
port(
	clk, reset : in std_logic;
	input_polynom : in std_logic_vector(BITNES-1 downto 0);
	polynom_WE : in std_logic;
	outputLFSR : out std_logic_vector(BITNES-1 downto 0)
);
end LFSR;


architecture RTL of LFSR is
signal configure_register_output : std_logic_vector(BITNES-1 downto 0);
signal LFSR : std_logic_vector(BITNES-1 downto 0);
signal coder_ind : std_logic_vector(TEST-1 downto 0);
signal LFSR_shift_in : std_logic;
signal MUX_output : std_logic;
signal poly_deg : integer;
begin

POLYNOM_REGISTER: process(clk) 
begin
if(rising_edge(clk)) then
    if(reset = '1') then
        configure_register_output <= (others => '0');
    else
	   if(polynom_WE = '1') then	
			configure_register_output <= input_polynom;
	   else
			configure_register_output <= configure_register_output;
	   end if;	
	end if;
end if;
end process;

MAX_DEG: process(input_polynom) 
begin
	for k in BITNES-1 downto 0 loop
		if(input_polynom(k) = '1') then
			poly_deg<=k;
			exit;
		end if;
	end loop;
end process;

LFSR_module: process(clk)
variable LFSR_output : std_logic_vector(BITNES-1 downto 0) := (0 => '1',others => '0');
begin
if(rising_edge(clk)) then
    if(reset = '1') then
        LFSR_output := (0 => '1',others => '0');
    else
		for k in 1 to poly_deg loop
	   --LFSR_output := LFSR_output(BITNES-2 downto 0) & LFSR_shift_in;
			LFSR_output(k-1)<=LFSR_output(k);
	   end loop;
	   LFSR_output(deg)<=LFSR_shift_in;
	end if;
end if;
	outputLFSR <= LFSR_output;
	LFSR <= LFSR_output;
end process;

LFSR_func: process(LFSR, configure_register_output)
variable tmp : std_logic_vector(BITNES downto 0);
begin
	tmp := (others => '0');
	--for k in BITNES-1 downto 0 loop
	for k in poly_deg downto 0 loop
		tmp(k) := tmp(k+1) xor (configure_register_output(k) and LFSR(k));
	end loop;
    LFSR_shift_in <= tmp(0);
end process;






end RTL;

--entity conf_LFSR is
--port ( clk : in std_logic;
--rst : in std_logic;
--poly  :in std_logic_vector(15 downto 0);
--quit:out std_logic_vector(15 downto 0));
--end conf_LFSR;
--
--
--architecture behav of conf_LFSR is
--signal deg : integer;
--signal LFSR : std_logic_vector (poly'high downto 0):=(0=>'1',others=>'0');
--signal temp_poly : std_logic_vector (poly'high downto 0);
--signal feedback : std_logic;
--begin
--
--process(poly)
--variable i : integer;
--begin
----if rising_edge(clk) then 
--	--temp_poly<=poly;
--	for k in poly'high to 0 loop
--		--deg<=k;
--		--exit when poly(k)='1';
--		if poly(k)='1' then 
--		  deg<=k;
--		  exit;
--		end if;
--	end loop;
----end if;
--end process;
--
--process(clk)
--variable init : std_logic_vector(poly'high downto 0);
----variable temp_LFSR : std_logic_vector(deg downto 0);
--begin
--if rising_edge(clk) then	
--	if rst='1' then
--		init := (others=>'0');
--		init(0) := '1';
--		LFSR<=init;
--	else 
--		--temp_LFSR:=LFSR(deg downto 0);
--		--temp_LFSR:=feedback & temp_LFSR(deg downto 1);
--		--LFSR<=LFSR(poly'high downto deg-1) & feedback & LFSR(deg-1 downto 0);
--	end if;
--end if;
--end process;
--
--process(LFSR, deg)
--variable temp_feedback : std_logic;
--begin
--temp_feedback:='0';
--for i in 0 to poly'high loop
--    exit when i=deg;
--	if (poly(i)='1') then
--		temp_feedback := temp_feedback xor LFSR(i);
--	end if;	
--end loop;
--feedback <= temp_feedback;
--end process;
--quit <= LFSR;
--end behav;
